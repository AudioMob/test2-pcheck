// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Audiomob_OpenMeasurement
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import __ObjC
public class AudiomobOpenMeasurement {
  public init()
  public func start(_ audiomobVersionString: Swift.String) throws -> Swift.Bool
  public func startMeasurement(_ vendor: Swift.String?, _ resource: Swift.String, _ parameters: Swift.String?, _ duration: Swift.Float, _ adFormatInt: Swift.Int, _ skipOffset: Swift.Float, _ minDurationToShowSkipButton: Swift.Float, _ unityView: UIKit.UIView?, completion: @escaping () -> Swift.Void) throws -> Swift.Bool
  public func recordEvent(_ trackingEventInt: Swift.Int) throws -> Swift.Bool
  public func stopMeasurement() throws -> Swift.Bool
  public func createWebView(resource: Swift.String, completion: @escaping (Swift.Result<WebKit.WKWebView, Audiomob_OpenMeasurement.OpenMeasurementError>) -> Swift.Void)
  @objc deinit
}
public enum TrackingEvent : Swift.Int {
  case impression
  case start
  case firstQuartile
  case midpoint
  case thirdQuartile
  case finished
  case paused
  case resumed
  case skipped
  case clicked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AdFormat : Swift.Int {
  case rewarded
  case skippable
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_cdecl("audiomobOmsdk_start")
public func audiomobOmsdk_start(_ audiomobVersionString: Swift.UnsafePointer<Swift.CChar>?) -> Swift.Bool
@_cdecl("audiomobOmsdk_startMeasurement")
public func audiomobOmsdk_startMeasurement(_ vendor: Swift.UnsafePointer<Swift.CChar>?, _ resource: Swift.UnsafePointer<Swift.CChar>?, _ parameters: Swift.UnsafePointer<Swift.CChar>?, _ duration: Swift.Float, _ adFormatInt: Swift.Int, _ skipOffset: Swift.Float, _ minDurationToShowSkipButton: Swift.Float) -> Swift.Bool
@_cdecl("audiomobOmsdk_recordEvent")
public func audiomobOmsdk_recordEvent(trackingEventInt: Swift.Int) -> Swift.Bool
@_cdecl("audiomobOmsdk_stopMeasurement")
public func audiomobOmsdk_stopMeasurement() -> Swift.Bool
public struct OpenMeasurementError : Swift.Error {
  public init(_ message: Swift.String)
}
extension Audiomob_OpenMeasurement.OpenMeasurementError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Audiomob_OpenMeasurement.TrackingEvent : Swift.Equatable {}
extension Audiomob_OpenMeasurement.TrackingEvent : Swift.Hashable {}
extension Audiomob_OpenMeasurement.TrackingEvent : Swift.RawRepresentable {}
extension Audiomob_OpenMeasurement.AdFormat : Swift.Equatable {}
extension Audiomob_OpenMeasurement.AdFormat : Swift.Hashable {}
extension Audiomob_OpenMeasurement.AdFormat : Swift.RawRepresentable {}
